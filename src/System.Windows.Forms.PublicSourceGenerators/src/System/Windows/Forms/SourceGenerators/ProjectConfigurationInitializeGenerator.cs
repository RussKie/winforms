// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Text;

namespace System.Windows.Forms
{
    internal class ProjectConfigurationInitializeGenerator
    {
        public static string GenerateInitialize(string projectNamespace, ProjectConfigurationInfo projectConfig)
        {
            string? defaultFont = GetDefaultFont(projectConfig);

            const string indent = "            ";

            StringBuilder sb = new();
            sb.AppendFormat(
@"// <auto-generated />

using System.Drawing;
using System.Windows.Forms;

namespace {0}", projectNamespace);

            sb.AppendLine(@"{
    /// <summary>
    ///  Bootstrap the application configuration.
    /// </summary>
    internal static partial class ProjectConfiguration
    {
        /// <summary>
        ///  Bootstrap the application as follows:
        ///  <code>");

            if (projectConfig.EnableVisualStyles)
            {
                sb.AppendLine("        ///  Application.EnableVisualStyles();");
            }

            if (defaultFont is not null)
            {
                sb.AppendLine($"        ///  Application.SetDefaultFont({defaultFont});");
            }

            sb.AppendLine($"        ///  Application.SetHighDpiMode(HighDpiMode.{projectConfig.HighDpiMode});");

            sb.AppendLine(@"        /// </code>
        /// </summary>
        public static void Initialize()
        {");

            if (projectConfig.EnableVisualStyles)
            {
                sb.AppendLine($"{indent}Application.EnableVisualStyles();");
            }

            if (defaultFont is not null)
            {
                sb.AppendLine($"{indent}Application.SetDefaultFont({defaultFont});");
            }

            sb.AppendLine($"{indent}Application.SetHighDpiMode(HighDpiMode.{projectConfig.HighDpiMode});");

            sb.AppendLine(@"        }
    }
}");

            return sb.ToString();

            static string? GetDefaultFont(ProjectConfigurationInfo projectConfig)
            {
                if (!string.IsNullOrWhiteSpace(projectConfig.FontFamily) || projectConfig.FontSize.HasValue)
                {
                    string fontFamily = string.IsNullOrWhiteSpace(projectConfig.FontFamily)
                        ? "Control.DefaultFont.FontFamily"
                        : $"new FontFamily(\"{projectConfig.FontFamily}\")";
                    float fontSize = projectConfig.FontSize ?? 9f;

                    return $"new Font({fontFamily}, {fontSize}f)";
                }

                return null;
            }
        }
    }
}
