// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using Microsoft.CodeAnalysis;

namespace System.Windows.Forms
{
    [Generator]
    internal class ProjectConfigurationGenerator : ISourceGenerator
    {
        private const string ProjectConfigurationFileName = "project.json";
        private const string ProjectConfigurationInitializeStub = @"
// <auto-generated />
namespace SourceGenerated
{
    internal static partial class ProjectConfiguration
    {
        /// <summary>TODO</summary>
        public static void Initialize()
        {
            // This will be filled in by the generator from " + ProjectConfigurationFileName + @"
        }
    }
}
";

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is not ProjectConfigurationSyntaxReceiver syntaxReceiver)
            {
                throw new InvalidOperationException("We were given the wrong syntax receiver.");
            }

            //Debugger.Launch();

            if (!HasValidSyntaxNode(context, syntaxReceiver))
            {
                return;
            }

            if (!IsSupportedProjectType(context))
            {
                context.ReportDiagnostic(Diagnostic.Create("WF0101", nameof(ProjectConfigurationGenerator),
                    $"Only {nameof(OutputKind.WindowsApplication)} supported",
                    severity: DiagnosticSeverity.Error,
                    defaultSeverity: DiagnosticSeverity.Error,
                    isEnabledByDefault: true,
                    warningLevel: 0));
                return;
            }

            if (!TryGetProjectRootPath(context, out string? projectRootPath))
            {
                context.ReportDiagnostic(Diagnostic.Create("WF0102", nameof(ProjectConfigurationGenerator),
                    $"Failed to read 'build_property.projectdir' value",
                    severity: DiagnosticSeverity.Warning,
                    defaultSeverity: DiagnosticSeverity.Warning,
                    isEnabledByDefault: true,
                    warningLevel: 4));
                return;
            }

            // We can't tag netstandard2.1 that supports [NotNullWhen(..)] decorations because VS runs on net48
            if (!TryLocateProjectDefinitionFile(context, projectRootPath!, out string? projectDefinitionFile))
            {
                context.ReportDiagnostic(Diagnostic.Create("WF0103", nameof(ProjectConfigurationGenerator),
                    $"{projectRootPath}project.json not found",
                    severity: DiagnosticSeverity.Error,
                    defaultSeverity: DiagnosticSeverity.Error,
                    isEnabledByDefault: true,
                    warningLevel: 0));
                return;
            }

            context.ReportDiagnostic(Diagnostic.Create("PC0", nameof(ProjectConfigurationGenerator),
                "project.json found :)", DiagnosticSeverity.Warning, DiagnosticSeverity.Warning, true, 4));

            //var sb = new StringBuilder();
            //GenerateValidator(context, sb, enumsToValidate);

            //if (context.CancellationToken.IsCancellationRequested)
            //{
            //    return;
            //}

            //context.AddSource("ProjectConfiguration.cs", sb.ToString());

            context.AddSource("ProjectConfiguration.cs", ProjectConfigurationInitializeStub);
        }

        private bool HasValidSyntaxNode(GeneratorExecutionContext context, ProjectConfigurationSyntaxReceiver syntaxReceiver)
        {
            if (syntaxReceiver.Nodes.Count == 0)
            {
#if DEBUG
                context.ReportDiagnostic(Diagnostic.Create("DBG", nameof(ProjectConfigurationGenerator),
                    $"Nothing to do", DiagnosticSeverity.Warning, DiagnosticSeverity.Warning, true, 4));
#endif
                return false;
            }
            else if (syntaxReceiver.Nodes.Count != 1)
            {
                foreach (SyntaxNode node in syntaxReceiver.Nodes)
                {
                    context.ReportDiagnostic(
                        Diagnostic.Create("PC0", nameof(ProjectConfigurationGenerator),
                            $"ProjectConfiguration.Initialize can only be used once per project",
                            severity: DiagnosticSeverity.Error,
                            defaultSeverity: DiagnosticSeverity.Error,
                            isEnabledByDefault: true,
                            warningLevel: 0,
                            location: node.GetLocation()));
                }

                return false;
            }

            return true;
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new ProjectConfigurationSyntaxReceiver());
        }

        private bool IsSupportedProjectType(GeneratorExecutionContext context)
            => context.Compilation.Options.OutputKind == OutputKind.WindowsApplication;

        private static bool TryGetProjectRootPath(GeneratorExecutionContext context, out string? projectRootPath)
            => context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.projectdir", out projectRootPath) &&
               !string.IsNullOrEmpty(projectRootPath);

        private static bool TryLocateProjectDefinitionFile(GeneratorExecutionContext context, string projectRootPath, out string? projectDefinitionFile)
        {
            string projectJsonFile = Path.Combine(projectRootPath, ProjectConfigurationFileName);

            foreach (AdditionalText additionalFile in context.AdditionalFiles)
            {
                // TODO: linked files?
                if (additionalFile.Path.Equals(projectJsonFile, StringComparison.OrdinalIgnoreCase))
                {
                    projectDefinitionFile = projectJsonFile;
                    return true;
                }
            }

            projectDefinitionFile = null;
            return false;
        }
    }
}
