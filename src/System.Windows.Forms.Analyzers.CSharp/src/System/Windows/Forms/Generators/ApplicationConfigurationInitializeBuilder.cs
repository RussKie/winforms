// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Text;

namespace System.Windows.Forms.Generators
{
    internal class ApplicationConfigurationInitializeBuilder
    {
        public static string GenerateInitialize(string projectNamespace, ApplicationConfig projectConfig)
        {
            string? defaultFont = GetDefaultFont(projectConfig);

            return string.Format(
@"// <auto-generated />

using System.Drawing;
using System.Windows.Forms;

namespace {0}
{{
    /// <summary>
    ///  Bootstrap the application configuration.
    /// </summary>
    internal static partial class ApplicationConfiguration
    {{
        /// <summary>
        ///  Bootstrap the application as follows:
        ///  <code>
{1}
        /// </code>
        /// </summary>
        public static void Initialize()
        {{
{2}
        }}
    }}
}}
",
            projectNamespace,
            GenerateCode(projectConfig, defaultFont, "        ///  "),
            GenerateCode(projectConfig, defaultFont, "            "));

            static string GenerateCode(ApplicationConfig projectConfig, string? defaultFont, string indent)
            {
                StringBuilder code = new();
                if (projectConfig.EnableVisualStyles)
                {
                    code.AppendLine($"{indent}Application.EnableVisualStyles();");
                }

                code.AppendLine($"{indent}Application.SetCompatibleTextRenderingDefault({projectConfig.UseCompatibleTextRendering.ToString().ToLowerInvariant()});");

                if (defaultFont is not null)
                {
                    code.AppendLine($"{indent}Application.SetDefaultFont({defaultFont});");
                }

                // Don't append line as we don't need the trailing \r\n!
                code.Append($"{indent}Application.SetHighDpiMode(HighDpiMode.{projectConfig.HighDpiMode});");

                return code.ToString();
            }

            static string? GetDefaultFont(ApplicationConfig projectConfig)
            {
                if (!string.IsNullOrWhiteSpace(projectConfig.FontFamily) || projectConfig.FontSize.HasValue)
                {
                    string fontFamily = string.IsNullOrWhiteSpace(projectConfig.FontFamily)
                        ? "Control.DefaultFont.FontFamily"
                        : $"new FontFamily(\"{projectConfig.FontFamily}\")";
                    float fontSize = projectConfig.FontSize ?? 9f;

                    return $"new Font({fontFamily}, {fontSize}f)";
                }

                return null;
            }
        }
    }
}
